// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Professional schema for scalable social app

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  profile   Profile?
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  saves     Save[]
  followers Follow[] @relation("Following")
  following Follow[] @relation("Follower")
}

model Profile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  name      String
  surname   String
  username  String   @unique
  avatarId  String?
  avatar    File?    @relation("ProfileAvatar", fields: [avatarId], references: [id])
  telegram  String?
  instagram String?
  description String?
  lastUsernameChange DateTime @default(now())
}

model Post {
  id        String   @id @default(uuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  imageId   String?
  image     File?    @relation("PostImage", fields: [imageId], references: [id])
  createdAt DateTime @default(now())
  description String?
  likes     Like[]
  comments  Comment[]
  saves     Save[]
}

model File {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  avatarProfile Profile[] @relation("ProfileAvatar")
  imagePosts Post[] @relation("PostImage")
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  @@unique([userId, postId])
}

model Follow {
  id        String   @id @default(uuid())
  follower  User     @relation("Follower", fields: [followerId], references: [id])
  followerId String
  following User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt DateTime @default(now())
  @@unique([followerId, followingId])
}

model Comment {
  id        String   @id @default(uuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  content   String
  createdAt DateTime @default(now())
}

model Save {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  @@unique([userId, postId])
}
